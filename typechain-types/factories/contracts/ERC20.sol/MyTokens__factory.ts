/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MyTokens,
  MyTokensInterface,
} from "../../../contracts/ERC20.sol/MyTokens";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "checkBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50336040518060400160405280600781526020017f4d59544f4b454e000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f4d544b0000000000000000000000000000000000000000000000000000000000815250816003908161008d9190610728565b50806004908161009d9190610728565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101125760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610109919061083b565b60405180910390fd5b6101218161015c60201b60201c565b506101573361013461022260201b60201c565b600a61014091906109c5565b606461014c9190610a10565b61022b60201b60201c565b610ae7565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006012905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361029d5760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610294919061083b565b60405180910390fd5b6102af600083836102b360201b60201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036103055780600260008282546102f99190610a52565b925050819055506103d8565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610391578381836040517fe450d38c00000000000000000000000000000000000000000000000000000000815260040161038893929190610a95565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610421578060026000828254039250508190555061046e565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516104cb9190610acc565b60405180910390a3505050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061055957607f821691505b60208210810361056c5761056b610512565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026105d47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610597565b6105de8683610597565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061062561062061061b846105f6565b610600565b6105f6565b9050919050565b6000819050919050565b61063f8361060a565b61065361064b8261062c565b8484546105a4565b825550505050565b600090565b61066861065b565b610673818484610636565b505050565b5b818110156106975761068c600082610660565b600181019050610679565b5050565b601f8211156106dc576106ad81610572565b6106b684610587565b810160208510156106c5578190505b6106d96106d185610587565b830182610678565b50505b505050565b600082821c905092915050565b60006106ff600019846008026106e1565b1980831691505092915050565b600061071883836106ee565b9150826002028217905092915050565b610731826104d8565b67ffffffffffffffff81111561074a576107496104e3565b5b6107548254610541565b61075f82828561069b565b600060209050601f8311600181146107925760008415610780578287015190505b61078a858261070c565b8655506107f2565b601f1984166107a086610572565b60005b828110156107c8578489015182556001820191506020850194506020810190506107a3565b868310156107e557848901516107e1601f8916826106ee565b8355505b6001600288020188555050505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610825826107fa565b9050919050565b6108358161081a565b82525050565b6000602082019050610850600083018461082c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156108dc578086048111156108b8576108b7610856565b5b60018516156108c75780820291505b80810290506108d585610885565b945061089c565b94509492505050565b6000826108f557600190506109b1565b8161090357600090506109b1565b8160018114610919576002811461092357610952565b60019150506109b1565b60ff84111561093557610934610856565b5b8360020a91508482111561094c5761094b610856565b5b506109b1565b5060208310610133831016604e8410600b84101617156109875782820a90508381111561098257610981610856565b5b6109b1565b6109948484846001610892565b925090508184048111156109ab576109aa610856565b5b81810290505b9392505050565b600060ff82169050919050565b60006109d0826105f6565b91506109db836109b8565b9250610a087fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846108e5565b905092915050565b6000610a1b826105f6565b9150610a26836105f6565b9250828202610a34816105f6565b91508282048414831517610a4b57610a4a610856565b5b5092915050565b6000610a5d826105f6565b9150610a68836105f6565b9250828201905080821115610a8057610a7f610856565b5b92915050565b610a8f816105f6565b82525050565b6000606082019050610aaa600083018661082c565b610ab76020830185610a86565b610ac46040830184610a86565b949350505050565b6000602082019050610ae16000830184610a86565b92915050565b61139a80610af66000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c57806395d89b411161006657806395d89b4114610261578063a9059cbb1461027f578063dd62ed3e146102af578063f2fde38b146102df576100ea565b806370a0823114610209578063715018a6146102395780638da5cb5b14610243576100ea565b806323b872dd116100c857806323b872dd1461015b578063313ce5671461018b57806342966c68146101a95780635f515226146101d9576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd1461013d575b600080fd5b6100f76102fb565b6040516101049190610ee9565b60405180910390f35b61012760048036038101906101229190610fa4565b61038d565b6040516101349190610fff565b60405180910390f35b6101456103b0565b6040516101529190611029565b60405180910390f35b61017560048036038101906101709190611044565b6103ba565b6040516101829190610fff565b60405180910390f35b6101936103e9565b6040516101a091906110b3565b60405180910390f35b6101c360048036038101906101be91906110ce565b6103f2565b6040516101d09190610fff565b60405180910390f35b6101f360048036038101906101ee91906110fb565b610452565b6040516102009190611029565b60405180910390f35b610223600480360381019061021e91906110fb565b610464565b6040516102309190611029565b60405180910390f35b6102416104ac565b005b61024b6104c0565b6040516102589190611137565b60405180910390f35b6102696104ea565b6040516102769190610ee9565b60405180910390f35b61029960048036038101906102949190610fa4565b61057c565b6040516102a69190610fff565b60405180910390f35b6102c960048036038101906102c49190611152565b6105de565b6040516102d69190611029565b60405180910390f35b6102f960048036038101906102f491906110fb565b610665565b005b60606003805461030a906111c1565b80601f0160208091040260200160405190810160405280929190818152602001828054610336906111c1565b80156103835780601f1061035857610100808354040283529160200191610383565b820191906000526020600020905b81548152906001019060200180831161036657829003601f168201915b5050505050905090565b6000806103986106eb565b90506103a58185856106f3565b600191505092915050565b6000600254905090565b6000806103c56106eb565b90506103d2858285610705565b6103dd85858561079a565b60019150509392505050565b60006012905090565b6000816103fe33610464565b101561043f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104369061123e565b60405180910390fd5b610449338361088e565b60019050919050565b600061045d82610464565b9050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6104b4610910565b6104be6000610997565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600480546104f9906111c1565b80601f0160208091040260200160405190810160405280929190818152602001828054610525906111c1565b80156105725780601f1061054757610100808354040283529160200191610572565b820191906000526020600020905b81548152906001019060200180831161055557829003601f168201915b5050505050905090565b60008161058833610464565b10156105c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c0906112aa565b60405180910390fd5b6105d433848461079a565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61066d610910565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106df5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016106d69190611137565b60405180910390fd5b6106e881610997565b50565b600033905090565b6107008383836001610a5d565b505050565b600061071184846105de565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110156107945781811015610784578281836040517ffb8f41b200000000000000000000000000000000000000000000000000000000815260040161077b939291906112ca565b60405180910390fd5b61079384848484036000610a5d565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361080c5760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016108039190611137565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361087e5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016108759190611137565b60405180910390fd5b610889838383610c34565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109005760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016108f79190611137565b60405180910390fd5b61090c82600083610c34565b5050565b6109186106eb565b73ffffffffffffffffffffffffffffffffffffffff166109366104c0565b73ffffffffffffffffffffffffffffffffffffffff1614610995576109596106eb565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161098c9190611137565b60405180910390fd5b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610acf5760006040517fe602df05000000000000000000000000000000000000000000000000000000008152600401610ac69190611137565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610b415760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610b389190611137565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015610c2e578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610c259190611029565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c86578060026000828254610c7a9190611330565b92505081905550610d59565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610d12578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610d09939291906112ca565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610da25780600260008282540392505081905550610def565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610e4c9190611029565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e93578082015181840152602081019050610e78565b60008484015250505050565b6000601f19601f8301169050919050565b6000610ebb82610e59565b610ec58185610e64565b9350610ed5818560208601610e75565b610ede81610e9f565b840191505092915050565b60006020820190508181036000830152610f038184610eb0565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f3b82610f10565b9050919050565b610f4b81610f30565b8114610f5657600080fd5b50565b600081359050610f6881610f42565b92915050565b6000819050919050565b610f8181610f6e565b8114610f8c57600080fd5b50565b600081359050610f9e81610f78565b92915050565b60008060408385031215610fbb57610fba610f0b565b5b6000610fc985828601610f59565b9250506020610fda85828601610f8f565b9150509250929050565b60008115159050919050565b610ff981610fe4565b82525050565b60006020820190506110146000830184610ff0565b92915050565b61102381610f6e565b82525050565b600060208201905061103e600083018461101a565b92915050565b60008060006060848603121561105d5761105c610f0b565b5b600061106b86828701610f59565b935050602061107c86828701610f59565b925050604061108d86828701610f8f565b9150509250925092565b600060ff82169050919050565b6110ad81611097565b82525050565b60006020820190506110c860008301846110a4565b92915050565b6000602082840312156110e4576110e3610f0b565b5b60006110f284828501610f8f565b91505092915050565b60006020828403121561111157611110610f0b565b5b600061111f84828501610f59565b91505092915050565b61113181610f30565b82525050565b600060208201905061114c6000830184611128565b92915050565b6000806040838503121561116957611168610f0b565b5b600061117785828601610f59565b925050602061118885828601610f59565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806111d957607f821691505b6020821081036111ec576111eb611192565b5b50919050565b7f62616c616e6365206e6f7420656e6f7567680000000000000000000000000000600082015250565b6000611228601283610e64565b9150611233826111f2565b602082019050919050565b600060208201905081810360008301526112578161121b565b9050919050565b7f42616c616e6365206e6f7420656e6f7567687400000000000000000000000000600082015250565b6000611294601383610e64565b915061129f8261125e565b602082019050919050565b600060208201905081810360008301526112c381611287565b9050919050565b60006060820190506112df6000830186611128565b6112ec602083018561101a565b6112f9604083018461101a565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061133b82610f6e565b915061134683610f6e565b925082820190508082111561135e5761135d611301565b5b9291505056fea2646970667358221220e8e314fc361effa8cbf4a92ac6b294f21b589ba89da06cf34447f321ac287b8164736f6c634300081c0033";

type MyTokensConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MyTokensConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MyTokens__factory extends ContractFactory {
  constructor(...args: MyTokensConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MyTokens & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MyTokens__factory {
    return super.connect(runner) as MyTokens__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MyTokensInterface {
    return new Interface(_abi) as MyTokensInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MyTokens {
    return new Contract(address, _abi, runner) as unknown as MyTokens;
  }
}
